<?php
namespace Entities\Repositories;

use Doctrine\ORM\EntityRepository;
use Entities;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
  /**
   * Returnerer de neste hendelsene basert begrenset opp til $limit
   *
   * @param integer $limit
   * @return \Entities\Event
   */
  public function getNextEvents($limit = 5,$onlyPublic = true,$from = null) {
    $q = $this->createQueryBuilder('e')
              ->select('e','s')
              ->leftJoin('e.speaker','s')
            ;
    if($from instanceof \DateTime){
      $q->where('e.end > :from')
        ->setParameter('from', $from, 'datetime');
    }else{
      $q->where('e.end > CURRENT_TIMESTAMP()');
    }
    $q->setMaxResults($limit)
      ->orderBy('e.start', 'ASC');
    if($onlyPublic){
      $q->andWhere('e.isPublic = 1');
    }
    return $q->getQuery()->getResult();
  }
  /**
   * Funksjon som returnerer hendelser som foregår samtidig som andre hendeler
   * Nyttig for å unngå dobbeltbooking ol.
   *
   * @param \Entities\Event $event hendelsn som du vil ha samtidige hendelser til
   * @return \Entities\Event
   */
  public function getConcurrentEvents(\Entities\Event $event){
    $q = $this->getEntityManager()
            ->createQuery('SELECT e FROM Entities\Event e WHERE e.start < :end AND e.end > :start AND e.id != :notId ORDER BY e.start')
            ->setParameter('start',$event->getStart(),'datetime')
            ->setParameter('end',$event->getEnd(),'datetime')
            ->setParameter('notId', $event->getId());
    return $q->getResult();
  }
  public function getEventsBetween(\DateTime $from, \DateTime $to){
    $days = ($to->getTimestamp() - $from->getTimestamp())/(60*60*24);// difference in days
    if($days > 100 || $days < 0){
      throw new \Exception("Invalid range getEventsBetween(\$from = '$from->format('Y-m-d')', \$to = '$to->format('Y-m-d')')");
    }
    $q = $this->getEntityManager()
            ->createQuery('SELECT e FROM Entities\Event e WHERE e.start < :to AND e.end > :from')
            ->setParameter('to', $to,'datetime')
            ->setParameter('from', $from, 'datetime');
    return $q->getResult();
  }
  public function find($id){
    $q = $this->getEntityManager()
            ->createQuery('SELECT e , s, r FROM \Entities\Event e LEFT JOIN e.speaker s LEFT JOIN e.responsibilities r WHERE e.id = ?1')
            ->setParameter(1, $id,'integer');
    return $q->getSingleResult();
  }
}